#!/usr/bin/env node
// 引入主服务器入口文件
const express = require('express');
const http = require('http');
const socket = require('socket.io');

// 连接数据库
// const mongoose = require('../business/configs/mongoose').chat;
// const db = mongoose();

// 引入中间件
const checkUserMiddleWare = require('../chatMiddleWare/checkUser');
const connectionNiddleWare = require('../chatMiddleWare/connection');

const app = express();
let port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening',listener);

const io = socket(server);
//
// // 对socket的连接请求进行身份验证
io.use(checkUserMiddleWare);
// 验证通过后的连接请求
io.on('connection',connectionNiddleWare);


// 格式化端口
function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        return port;
    }
    return false;
}
// 启动失败信息
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    let bind = typeof port === 'string' ? '通道 ' + port : '端口 ' + port;
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' 需要提升权限');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' 端口已经被使用');
            process.exit(1);
            break;
        default:
            throw error;
    }
}
// 启动成功信息
function listener() {
    let addr = server.address();
    let bind = typeof addr === 'string' ? '通道 ' + addr : '端口 ' + addr.port;
    console.log('聊天服务器启动成功(^_^),正在监听 ' + bind);
}